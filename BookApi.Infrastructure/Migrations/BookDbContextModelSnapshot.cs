// <auto-generated />
using System;
using BookApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookApi.Infrastructure.Migrations
{
    [DbContext(typeof(BookDbContext))]
    partial class BookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("BookApi.Infrastructure.DataModels.AuthorDataModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedByID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("TEXT");

                    b.Property<int>("VersionID")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("BookApi.Infrastructure.DataModels.BookDataModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PublisherID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedByID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("TEXT");

                    b.Property<int>("VersionID")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.HasIndex("PublisherID");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("BookApi.Infrastructure.DataModels.Intermediates.BookAuthorDataModel", b =>
                {
                    b.Property<int>("AuthorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookDataModelID")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorID", "BookID");

                    b.HasIndex("BookDataModelID");

                    b.HasIndex("BookID");

                    b.ToTable("BookAuthor", (string)null);
                });

            modelBuilder.Entity("BookApi.Infrastructure.DataModels.PublisherDataModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedByID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("TEXT");

                    b.Property<int>("VersionID")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Publisher", (string)null);
                });

            modelBuilder.Entity("BookApi.Infrastructure.DataModels.BookDataModel", b =>
                {
                    b.HasOne("BookApi.Infrastructure.DataModels.PublisherDataModel", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookApi.Infrastructure.DataModels.Intermediates.BookAuthorDataModel", b =>
                {
                    b.HasOne("BookApi.Infrastructure.DataModels.AuthorDataModel", null)
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookApi.Infrastructure.DataModels.BookDataModel", null)
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookDataModelID");

                    b.HasOne("BookApi.Infrastructure.DataModels.BookDataModel", null)
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookApi.Infrastructure.DataModels.BookDataModel", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("BookApi.Infrastructure.DataModels.PublisherDataModel", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
